// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/m11ano/avito-shop/internal/domain"
	mock "github.com/stretchr/testify/mock"

	usecase "github.com/m11ano/avito-shop/internal/usecase"

	uuid "github.com/google/uuid"
)

// ShopPurchaseRepository is an autogenerated mock type for the ShopPurchaseRepository type
type ShopPurchaseRepository struct {
	mock.Mock
}

// AggrInventoryByAccountID provides a mock function with given fields: ctx, accountID
func (_m *ShopPurchaseRepository) AggrInventoryByAccountID(ctx context.Context, accountID uuid.UUID) ([]usecase.ShopPurchaseRepositoryAggrInventoryItem, error) {
	ret := _m.Called(ctx, accountID)

	if len(ret) == 0 {
		panic("no return value specified for AggrInventoryByAccountID")
	}

	var r0 []usecase.ShopPurchaseRepositoryAggrInventoryItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]usecase.ShopPurchaseRepositoryAggrInventoryItem, error)); ok {
		return rf(ctx, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []usecase.ShopPurchaseRepositoryAggrInventoryItem); ok {
		r0 = rf(ctx, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]usecase.ShopPurchaseRepositoryAggrInventoryItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, shopPurchase
func (_m *ShopPurchaseRepository) Create(ctx context.Context, shopPurchase *domain.ShopPurchase) error {
	ret := _m.Called(ctx, shopPurchase)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ShopPurchase) error); ok {
		r0 = rf(ctx, shopPurchase)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindIdentity provides a mock function with given fields: ctx, identityKey
func (_m *ShopPurchaseRepository) FindIdentity(ctx context.Context, identityKey uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, identityKey)

	if len(ret) == 0 {
		panic("no return value specified for FindIdentity")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return rf(ctx, identityKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = rf(ctx, identityKey)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, identityKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewShopPurchaseRepository creates a new instance of ShopPurchaseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewShopPurchaseRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ShopPurchaseRepository {
	mock := &ShopPurchaseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
