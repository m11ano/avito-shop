// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/m11ano/avito-shop/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ShopItem is an autogenerated mock type for the ShopItem type
type ShopItem struct {
	mock.Mock
}

// GetItemByID provides a mock function with given fields: ctx, id
func (_m *ShopItem) GetItemByID(ctx context.Context, id uuid.UUID) (*domain.ShopItem, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetItemByID")
	}

	var r0 *domain.ShopItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.ShopItem, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.ShopItem); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ShopItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemByName provides a mock function with given fields: ctx, name
func (_m *ShopItem) GetItemByName(ctx context.Context, name string) (*domain.ShopItem, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetItemByName")
	}

	var r0 *domain.ShopItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.ShopItem, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.ShopItem); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ShopItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemsByIDs provides a mock function with given fields: ctx, ids
func (_m *ShopItem) GetItemsByIDs(ctx context.Context, ids []uuid.UUID) (map[uuid.UUID]domain.ShopItem, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetItemsByIDs")
	}

	var r0 map[uuid.UUID]domain.ShopItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) (map[uuid.UUID]domain.ShopItem, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) map[uuid.UUID]domain.ShopItem); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uuid.UUID]domain.ShopItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewShopItem creates a new instance of ShopItem. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewShopItem(t interface {
	mock.TestingT
	Cleanup(func())
}) *ShopItem {
	mock := &ShopItem{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
