// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/m11ano/avito-shop/internal/domain"
	mock "github.com/stretchr/testify/mock"

	usecase "github.com/m11ano/avito-shop/internal/usecase"

	uuid "github.com/google/uuid"
)

// CoinTransfer is an autogenerated mock type for the CoinTransfer type
type CoinTransfer struct {
	mock.Mock
}

// GetAggrCoinHistory provides a mock function with given fields: ctx, accountID, transferType
func (_m *CoinTransfer) GetAggrCoinHistory(ctx context.Context, accountID uuid.UUID, transferType domain.CoinTransferType) ([]usecase.CoinTransferGetAggrHistoryItem, error) {
	ret := _m.Called(ctx, accountID, transferType)

	if len(ret) == 0 {
		panic("no return value specified for GetAggrCoinHistory")
	}

	var r0 []usecase.CoinTransferGetAggrHistoryItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, domain.CoinTransferType) ([]usecase.CoinTransferGetAggrHistoryItem, error)); ok {
		return rf(ctx, accountID, transferType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, domain.CoinTransferType) []usecase.CoinTransferGetAggrHistoryItem); ok {
		r0 = rf(ctx, accountID, transferType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]usecase.CoinTransferGetAggrHistoryItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, domain.CoinTransferType) error); ok {
		r1 = rf(ctx, accountID, transferType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeTransferByUsername provides a mock function with given fields: ctx, targetAccountUsername, ownerAccountID, amount, identityKey
func (_m *CoinTransfer) MakeTransferByUsername(ctx context.Context, targetAccountUsername string, ownerAccountID uuid.UUID, amount int64, identityKey *uuid.UUID) (*domain.CoinTransfer, *domain.CoinTransfer, error) {
	ret := _m.Called(ctx, targetAccountUsername, ownerAccountID, amount, identityKey)

	if len(ret) == 0 {
		panic("no return value specified for MakeTransferByUsername")
	}

	var r0 *domain.CoinTransfer
	var r1 *domain.CoinTransfer
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, int64, *uuid.UUID) (*domain.CoinTransfer, *domain.CoinTransfer, error)); ok {
		return rf(ctx, targetAccountUsername, ownerAccountID, amount, identityKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, int64, *uuid.UUID) *domain.CoinTransfer); ok {
		r0 = rf(ctx, targetAccountUsername, ownerAccountID, amount, identityKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CoinTransfer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uuid.UUID, int64, *uuid.UUID) *domain.CoinTransfer); ok {
		r1 = rf(ctx, targetAccountUsername, ownerAccountID, amount, identityKey)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.CoinTransfer)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, uuid.UUID, int64, *uuid.UUID) error); ok {
		r2 = rf(ctx, targetAccountUsername, ownerAccountID, amount, identityKey)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewCoinTransfer creates a new instance of CoinTransfer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCoinTransfer(t interface {
	mock.TestingT
	Cleanup(func())
}) *CoinTransfer {
	mock := &CoinTransfer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
