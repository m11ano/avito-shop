// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/m11ano/avito-shop/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Account is an autogenerated mock type for the Account type
type Account struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, account
func (_m *Account) Create(ctx context.Context, account *domain.Account) error {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Account) error); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetItemByUsername provides a mock function with given fields: ctx, username
func (_m *Account) GetItemByUsername(ctx context.Context, username string) (*domain.Account, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetItemByUsername")
	}

	var r0 *domain.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Account, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Account); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemsByIDs provides a mock function with given fields: ctx, ids
func (_m *Account) GetItemsByIDs(ctx context.Context, ids []uuid.UUID) (map[uuid.UUID]domain.Account, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetItemsByIDs")
	}

	var r0 map[uuid.UUID]domain.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) (map[uuid.UUID]domain.Account, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) map[uuid.UUID]domain.Account); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uuid.UUID]domain.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccount creates a new instance of Account. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccount(t interface {
	mock.TestingT
	Cleanup(func())
}) *Account {
	mock := &Account{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
